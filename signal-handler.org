#+TITLE: sending messages to Common Lisp (sbcl) programs from foreign code (e.g., shell) using `kill -s USR1 $pid`
#+AUTHOR: Oleg Shalaev
#+EMAIL:  oleg@chalaev.com
#+LaTeX_HEADER: \usepackage[english,russian]{babel}
#+LATEX_HEADER: \usepackage[letterpaper,hmargin={1.5cm,1.5cm},vmargin={1.3cm,2cm},nohead,nofoot]{geometry}

#+BEGIN_SRC lisp :tangle generated/signal-handler.lisp
(in-package :signal-handler)
(defvar hooks nil)
#+END_SRC

In order to distinguish log messages from this code we define special logger:
#+BEGIN_SRC lisp :tangle generated/signal-handler.lisp
(defun log(type format-str &rest params)
  (apply #'sl:log (cons type (cons (concat "SH " format-str) params))))
#+END_SRC

* OS interface
This is a system function, so we have to use ~cffi~:
#+BEGIN_SRC lisp :tangle generated/signal-handler.lisp
(cffi:defcstruct saType ; typedef for sigaction
  (handler :pointer)
  (sigaction :pointer); unused
  (mask  :unsigned-long)
  (flags  :int))
#+END_SRC
where mask is ~SA_SIGINFO~ mask of signals which should be blocked during execution of the signal handler,
and flags modify the behaviour of the signal handling process.

For example, a shell-command =kill-s USR1 $pid= corresponds to ~signum=10~.
We are going to focus on this signal only and ignore the others (e.g., =USR2= or =HUP=):

External code is supposed to use some sort of =directory-lock= environment that 
1. creates a lock directory,
2. leaves a message there, and
3. before leaving the lock-environment, send ~kill~ signal to our lisp code.

So the first thing that our =sighandler= is going to check is if any of the lock-directories were created.
(There can actually be several of these named =active-hooks= below, and they all need to be addressed.)

Now once we have defined the callback by =cffi:defcallback=, we can use it (not vice versa – this order is important!)
#+BEGIN_SRC lisp :tangle generated/signal-handler.lisp
(let(started lock-dir)
(flet((pid-FN ()
  (ifn lock-dir (log sl:error "pid-FN: undefined lock-dir")
     (merge-pathnames "pid" lock-dir))))
(defun start(&optional (root-directory (uiop:temporary-directory)))
(setf lock-dir (uiop:ensure-directory-pathname root-directory))
(ensure-directories-exist lock-dir)
;;(log sl:debug "lock-dir= ~S" lock-dir); lock-dir= #P"/tmp/sbcl.lock/"
(iff started (log sl:warning "will not restart already active sigkill handler")
#+END_SRC
Defining callback function: =cffi:defcallback= immediately compiles its argument (the specified function) →
#+BEGIN_SRC lisp :tangle generated/signal-handler.lisp
(cffi:defcallback sighandler :void ((signum :int) (info :pointer) (ptr :pointer))
  (declare(integer signum))
  (when (= 10 signum)
    (dolist(hook hooks)
      (let((hook-dir(uiop:ensure-directory-pathname(merge-pathnames (car hook) lock-dir))))
        (when(uiop:directory-exists-p hook-dir)
          (funcall (cdr hook) hook-dir)
	  T))))); must return T
#+END_SRC
← I guess we need this =T= to let the system know that =kill= signal was properly handled.
Without this =T= further kill signals will be blocked.

The hook function =(cdr hook)= will now probably
1. read some file in the directory =hook-dir=,
2. perform the request encoded in this file, and
3. erase this file afterwards to let client(s) know that the system is ready to accept new requests.

This was the end of the kill-acceptor code named =sighandler=. Now let us activate it:
#+BEGIN_SRC lisp :tangle generated/signal-handler.lisp
(cffi:with-foreign-object (act '(:struct saType))
  (setf (cffi:foreign-slot-value act '(:struct saType) 'handler) (cffi:callback sighandler))
  (setf (cffi:foreign-slot-value act '(:struct saType) 'mask) iolib.syscalls:sa-siginfo)
  (iolib.syscalls:sigaction iolib.syscalls:sigusr1 act (cffi-sys:null-pointer)))
#+END_SRC

Sending kill signals has collateral effect – as if we evaluated =(bt:condition-notify stop-the-server)=.

Let the killers know whom to kill by creating ~pid~ file:
#+BEGIN_SRC lisp :tangle generated/signal-handler.lisp
(echo-to-file (pid-FN) (format nil "~d ok" (sb-posix:getpid)))
(log sl:info ":signal-handler is now ready to treat kill signals")
(setf started t)))
(defun stop()
  (delete-file (pid-FN))
  (log sl:info "erased ~a" (pid-FN)))))
#+END_SRC

I noticed that log messages were temporarily blocked with this code, and suspect that
this may happen due to the wrong (too strict) value of =iolib.syscalls:sa-siginfo= above.

* Handlers: register and forget
#+BEGIN_SRC lisp :tangle generated/signal-handler.lisp
(defun register (name hook-function)
(declare (string name))
#+END_SRC
← =hook-function= (or handler) must return =T=; otherwise further signals are blocked.

It will be evaluated when someone
1. creates a lock directory =name=, and then
2. sends the kill signal:
#+BEGIN_SRC lisp :tangle generated/signal-handler.lisp
(if(find name hooks :key #'car :test #'string=)
 (log sl:warning "will not re-register already active hook for ~s" name)
 (push (cons name hook-function) hooks)))
#+END_SRC
Forgetting hooks:
#+BEGIN_SRC lisp :tangle generated/signal-handler.lisp
(defun forget(name)
  (drop-if name hooks :key #'car :test #'string=))
(defun forget-all()
  (setf hooks nil))
#+END_SRC

